var searchIndex = JSON.parse('{\
"calloop":{"doc":"Calloop, a Callback-based Event Loop","t":"SNNDSSNCQQDIDCDNDDQENDESDDNNCQDDSLLLOOOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLAMLLLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLALALLLLKMMKLLLKLLALALLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLMMDDNENDDLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLEDNNNGLLLLMLLLLLLLLLLMLLLLLLLLLLLLLLDDENDNLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLMLLLLMLLMLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGDGLLLLLLFLLLLLLDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLNEDDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLL","n":["BOTH","Continue","Disable","Dispatcher","EMPTY","EMPTY","Edge","Error","Error","Event","EventLoop","EventSource","Idle","InsertError","Interest","Level","LoopHandle","LoopSignal","Metadata","Mode","OneShot","Poll","PostAction","READ","Readiness","RegistrationToken","Remove","Reregister","Result","Ret","Token","TokenFactory","WRITE","adapt_io","as_source_mut","as_source_ref","batch_register","batch_reregister","batch_unregister","bitor","bitor_assign","block_on","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cancel","channel","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","disable","dispatch","enable","eq","eq","eq","equivalent","equivalent","equivalent","error","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","futures","generic","get_signal","handle","insert_idle","insert_source","into","into","into","into","into","into","into","into","into","into","into","into","into","into_source_inner","io","new","ping","post_run","post_run","pre_run","pre_run","process_events","readable","readable","register","register","register_dispatcher","remove","reregister","reregister","run","signals","stop","timer","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","token","transient","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unregister","unregister","update","wakeup","writable","writable","Channel","ChannelError","Closed","Event","Msg","Sender","SyncSender","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","clone","clone","clone_into","clone_into","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","process_events","provide","recv","register","reregister","send","send","source","sync_channel","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_recv","try_send","type_id","type_id","type_id","type_id","type_id","unregister","Error","InsertError","InvalidToken","IoError","OtherError","Result","borrow","borrow","borrow_mut","borrow_mut","error","fmt","fmt","fmt","fmt","from","from","from","from","from","from","inserted","into","into","provide","provide","source","source","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Executor","ExecutorDestroyed","ExecutorError","NewFutureError","Scheduler","WakeError","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","drop","executor","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","process_events","provide","provide","register","reregister","schedule","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unregister","FdWrapper","Generic","as_fd","as_filelike","as_filelike_view","as_socketlike","as_socketlike_view","borrow","borrow","borrow_mut","borrow_mut","deref","deref_mut","file","fmt","fmt","from","from","interest","into","into","mode","new","new","new_with_error","process_events","register","reregister","try_from","try_from","try_into","try_into","type_id","type_id","unregister","unwrap","Async","Readable","Writable","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","drop","fmt","fmt","fmt","from","from","from","get_mut","into","into","into","into_future","into_future","into_inner","poll","poll","readable","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","writable","Ping","PingError","PingSource","borrow","borrow_mut","fmt","fmt","from","into","make_ping","provide","source","to_string","try_from","try_into","type_id","Event","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGIO","SIGKILL","SIGPIPE","SIGPROF","SIGPWR","SIGQUIT","SIGSEGV","SIGSTKFLT","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","Signal","SignalError","Signals","add_signals","as_ref","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_str","full_info","hash","hash","into","into","into","into","into","iterator","new","partial_cmp","process_events","provide","register","remove_signals","reregister","set_signals","siginfo","signal","source","ssi_addr","ssi_addr_lsb","ssi_arch","ssi_band","ssi_call_addr","ssi_code","ssi_errno","ssi_fd","ssi_int","ssi_overrun","ssi_pid","ssi_ptr","ssi_signo","ssi_status","ssi_stime","ssi_syscall","ssi_tid","ssi_trapno","ssi_uid","ssi_utime","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unregister","Drop","TimeoutAction","TimeoutFuture","Timer","ToDuration","ToInstant","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","current_deadline","fmt","fmt","fmt","from","from","from","from_deadline","from_deadline","from_duration","from_duration","immediate","into","into","into","into_future","poll","process_events","register","reregister","set_deadline","set_duration","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unregister","TransientSource","borrow","borrow_mut","default","fmt","from","from","into","is_none","map","process_events","register","remove","replace","reregister","try_from","try_into","type_id","unregister"],"q":[[0,"calloop"],[222,"calloop::channel"],[291,"calloop::error"],[327,"calloop::futures"],[381,"calloop::generic"],[417,"calloop::io"],[453,"calloop::ping"],[469,"calloop::signals"],[604,"calloop::timer"],[648,"calloop::transient"]],"d":["Shorthand for read and write interest","Continue listening for events on this source as before","Disable this source","An event source with its callback.","Shorthand for empty interest","Shorthand for empty readiness","Edge-triggering","","The error type returned from <code>process_events()</code> (not the …","The type of events generated by your source.","An event loop","Trait representing an event source","An idle callback that was inserted in this loop","","Interest to register regarding the file descriptor","Level-triggering","An handle to an event loop","A signal that can be shared between thread to stop or …","Some metadata of your event source","Possible modes for registering a file descriptor","Single event generation","The polling system","Possible actions that can be requested to the event loop …","Shorthand for read interest","Readiness for a file descriptor notification","A token representing a registration in the <code>EventLoop</code>.","Remove this source from the eventloop","Trigger a re-registration of this source","","The return type of the user callback","A token (for implementation of the <code>EventSource</code> trait)","Factory for creating tokens in your registrations","Shorthand for write interest","Wrap an IO object into an async adapter","Returns a mutable reference to the event source.","Returns an immutable reference to the event source.","Register a set of event sources. Effectively calls …","Reregister a set of event sources. Effectively calls …","Unregister a set of event sources. Effectively calls …","","","Block a future on this event loop.","","","","","","","","","","","","","","","","","","","","","","","","","","","Cancel the idle callback if it was not already run","An MPSC channel whose receiving end is an event source","","","","","","","","","","","","","","","","","","","Disables this event source.","Dispatch pending events to their callbacks","Enables this previously disabled event source.","","","","","","","Error types used and generated by Calloop.","Is the FD in an error state","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","A futures executor as an event source","A generic event source wrapping an IO objects or file …","Get a signal to stop this event loop from running","Retrieve a loop handle","Inserts an idle callback.","Inserts a new event source in the loop.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the Dispatcher and returns the inner event source.","Adapters for async IO objects","Builds a dispatcher.","Ping to the event loop","Notification that the current polling session ended","Notification that the current polling session ended","Notification that a polling session is going to start","Notification that a polling session is going to start","Process any relevant events","Wait for the FD to be readable","Is the FD readable","Register yourself to this poll instance","Register a new file descriptor for polling","Registers a <code>Dispatcher</code> in the loop.","Removes this source from the event loop.","Re-register your file descriptors","Update the registration for a file descriptor","Run this event loop","Event source for tracking Unix signals","Stop the event loop","Timer event source","","","","","","","","","","Produce a new unique token","Wrapper for a transient Calloop event source.","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new event loop","","","","","","","","","","","","","","Unregister your file descriptors","Unregister a file descriptor","Makes this source update its registration.","Wake up the event loop","Wait for the FD to be writable","Is the FD writable","The receiving end of the channel","An error arising from processing events for a channel.","The channel was closed","The events generated by the channel event source","A message was received and is bundled here","The sender end of a channel","The sender end of a synchronous channel","","","","","","","","","","","Create a new asynchronous channel","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Proxy for <code>mpsc::Receiver::recv</code> to manually poll events.","","","Send a message to the channel","Send a message to the synchronous channel","","Create a new synchronous, bounded channel","","","","","","","","","","","","","","Proxy for <code>mpsc::Receiver::try_recv</code> to manually poll events.","Send a message to the synchronous channel","","","","","","","The primary error type used by Calloop covering internal …","An error generated when trying to insert an event source","When an event source is registered (or re- or …","This variant wraps a <code>std::io::Error</code>, which might arise from","Any other unexpected error kind (most likely from a user …","<code>Result</code> alias using Calloop’s error type.","","","","","The generated error","","","","","","Converts the <code>InsertError</code> into Calloop’s error type, …","","Converts a <code>nix::Error</code> into a wrapped version of the …","Returns the argument unchanged.","Returns the argument unchanged.","The source that could not be inserted","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A future executor as an event source","Error generated when trying to schedule a future after the …","An error arising from processing events in an async …","Error while reading new futures added via …","A scheduler to send futures to an executor","Error while processing wake events from existing futures.","","","","","","","","","","","","Create a new executor, and its associated scheduler","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Sends the given future to the executor associated to this …","","","","","","","","","","","","","","","","","Wrapper to use a type implementing <code>AsRawFd</code> but not <code>AsFd</code> …","A generic event source wrapping a FD-backed type","","","","","","","","","","","","The wrapped FD-backed type","","","Returns the argument unchanged.","Returns the argument unchanged.","The programmed interest","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The programmed mode","Wrap <code>inner</code> with an <code>AsFd</code> implementation.","Wrap a FD-backed type into a <code>Generic</code> event source that uses","Wrap a FD-backed type into a <code>Generic</code> event source using an …","","","","","","","","","","","Unwrap the <code>Generic</code> source to retrieve the underlying type","Adapter for async IO manipulations","A future that resolves once the associated object becomes …","A future that resolves once the associated object becomes …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Mutably access the underlying IO object","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Remove the async adapter and retrieve the underlying object","","","A future that resolves once the object becomes ready for …","","","","","","","","","","A future that resolves once the object becomes ready for …","The ping event source","An error arising from processing events for a ping.","The Ping handle","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new ping event source","","","","","","","An event generated by the signal event source","Abort","Alarm clock","Bus error","To parent on child stop or exit","Continue a stopped process","Floating point exception","Hangup","Illegal instruction (not reset when caught)","Interrupt","Input/output possible signal","Kill (cannot be caught or ignored)","Write on a pipe with no one to read it","Profiling time alarm","Power failure imminent.","Quit","Segmentation violation","Stack fault (obsolete)","Sendable stop signal not from tty","Bad system call","Software termination signal from kill","Trace trap (not reset when caught)","Stop signal from tty","To readers pgrp upon background tty read","Like TTIN if (tp-&gt;t_local&amp;LTOSTOP)","Urgent condition on IO channel","User defined signal 1","User defined signal 2","Virtual time alarm","Window size changes","Exceeded CPU time limit","Exceeded file size limit","Types of operating system signals","An error arising from processing events for a process …","An event source for receiving Unix signals","Add a list of signals to the signals source","","Returns name of signal.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Access the full <code>siginfo_t</code> associated with this signal event","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate through all signals defined by this OS","Create a new signal event source listening on the …","","","","","Remove a list of signals from the signals source","","Replace the list of signals of the source","","Retrieve the signal number that was receive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Don’t reschedule this timer","Action to reschedule a timeout if necessary","A future that resolves once a certain timeout is expired","A timer event source","Reschedule this timer to a given <code>Duration</code> in the future","Reschedule this timer to a given <code>Instant</code>","","","","","","","Get the current deadline of this <code>Timer</code>","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a future that resolves at a given instant","Create a timer that will fire at a given instant","Create a future that resolves after a given duration","Create a timer that will fire after a given duration from …","Create a timer that will fire immediately when inserted in …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Changes the deadline of this timer to an <code>Instant</code>","Changes the deadline of this timer to a <code>Duration</code> from now","","","","","","","","","","","A <code>TransientSource</code> wraps a Calloop event source and manages …","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns <code>true</code> if there is no wrapped event source.","Apply a function to the enclosed source, if it exists and …","","","Removes the wrapped event source from the event loop and …","Replace the currently wrapped source with the given one.  …","","","","",""],"i":[16,9,9,0,16,17,15,0,5,5,0,0,0,0,0,15,0,0,5,0,15,0,0,16,0,0,9,9,0,5,0,0,16,1,6,6,0,0,0,9,9,10,24,1,10,6,14,15,16,17,27,18,19,20,9,24,1,10,6,14,15,16,17,27,18,19,20,9,14,0,1,6,15,16,17,18,19,20,9,1,6,15,16,17,18,19,20,9,1,10,1,18,19,9,18,19,9,0,17,24,1,10,6,14,15,16,17,27,18,19,20,9,24,1,10,6,14,15,16,17,27,18,19,20,9,0,0,10,10,1,1,24,1,10,6,14,15,16,17,27,18,19,20,9,6,0,6,0,5,5,5,5,5,16,17,5,24,1,1,5,24,10,0,20,0,1,6,15,16,17,18,19,20,9,27,0,24,1,10,6,14,15,16,17,27,18,19,20,9,24,1,10,6,14,15,16,17,27,18,19,20,9,10,24,1,10,6,14,15,16,17,27,18,19,20,9,5,24,1,20,16,17,0,0,35,0,35,0,0,35,32,33,36,37,35,32,33,36,37,0,32,33,32,33,32,35,32,33,36,37,37,35,32,33,36,37,35,32,33,36,37,36,37,36,36,36,32,33,37,0,32,33,37,35,32,33,36,37,35,32,33,36,37,36,33,35,32,33,36,37,36,0,0,46,46,46,0,46,29,46,29,29,46,46,29,29,46,46,46,46,46,29,29,46,29,46,29,46,29,46,29,46,29,46,29,46,29,0,0,0,55,0,55,53,52,54,55,53,52,54,55,52,52,53,0,53,52,54,54,55,55,53,52,54,55,53,52,54,55,53,54,55,53,53,52,52,54,55,53,52,54,55,53,52,54,55,53,52,54,55,53,0,0,57,57,57,57,57,57,63,57,63,57,57,63,57,63,57,63,63,57,63,63,57,63,63,63,63,63,57,63,57,63,57,63,63,63,0,0,0,3,64,65,3,64,65,3,3,64,65,3,64,65,3,3,64,65,64,65,3,64,65,3,3,64,65,3,64,65,3,64,65,3,0,0,0,69,69,69,69,69,69,0,69,69,69,69,69,69,0,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,0,0,0,71,72,72,75,71,78,72,76,75,71,78,72,76,75,72,76,75,72,76,72,71,72,76,72,76,75,71,78,78,72,72,76,75,71,78,72,76,72,75,72,76,75,71,78,72,76,72,71,72,71,78,71,71,71,71,0,75,78,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,75,72,76,78,72,75,71,78,72,72,76,75,71,78,72,76,75,71,78,72,76,71,85,0,0,0,85,85,84,82,85,84,82,85,82,84,82,85,84,82,85,84,82,84,82,82,84,82,85,84,84,82,82,82,82,82,84,82,85,84,82,85,84,82,85,82,0,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],[[4,[[3,[2]]]]]],[[[6,[5]]],[[7,[5]]]],[[[6,[5]]],[[8,[5]]]],0,0,0,[[9,9]],[[9,9]],[[10,11,12],[[4,[13]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14],0,[1,1],[6,6],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[9,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,19],4],[[10,[22,[[13,[21]]]]],4],[[1,19],4],[[18,18],23],[[19,19],23],[[9,9],23],[[],23],[[],23],[[],23],0,0,[[24,25],26],[[1,25],26],[[10,25],26],[[6,25],26],[[14,25],26],[[15,25],26],[[16,25],26],[[17,25],26],[[27,25],26],[[18,25],26],[[19,25],26],[[20,25],26],[[9,25],26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[10,20],[10,1],[[1,28],14],[[1,5,12],[[30,[19,[29,[5]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[6,[5]]],5],0,[[5,12],[[6,[5]]]],0,[12,4],[12,4],[12,4],[12,4],[[17,18,12],[[30,[9]]]],0,0,[[24,27],4],[[24,2,16,15,18],4],[[1,[6,[5]]],[[4,[19]]]],[[1,19]],[[24,27],4],[[24,2,16,15,18],4],[[10,[22,[[13,[21]]]],12],4],0,[20],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,18],0,[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],[[4,[10]]]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[24,4],[[24,2],4],[[1,19],4],[20],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[32,32],[33,33],[[]],[[]],[32],[[[35,[34]],25],26],[[[32,[34]],25],26],[[[33,[34]],25],26],[[[36,[34]],25],26],[[37,25],26],[[37,25],26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[36,17,18,12],[[30,[9]]]],[38],[36,[[30,[39]]]],[[36,24,27],4],[[36,24,27],4],[32,[[30,[40]]]],[33,[[30,[40]]]],[37,[[13,[41]]]],[42],[[]],[[]],[[],43],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[36,[[30,[44]]]],[33,[[30,[45]]]],[[],31],[[],31],[[],31],[[],31],[[],31],[[36,24],4],0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[[46,25],26],[[46,25],26],[[29,25],[[30,[47]]]],[[29,25],26],[48,46],[29,46],[[[49,[41]]],46],[50,46],[[]],[[]],0,[[]],[[]],[38],[38],[46,[[13,[41]]]],[29,[[13,[41]]]],[[],43],[[],43],[[],30],[[],30],[[],30],[[],30],[[],31],[[],31],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[52,[51]]],[[52,[51]]]],[[]],[53],[[],4],[[[53,[34]],25],26],[[[52,[34]],25],26],[[54,25],26],[[54,25],26],[[55,25],26],[[55,25],26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[53,17,18,12],[[30,[9]]]],[38],[38],[[53,24,27],4],[[53,24,27],4],[[52,11],[[30,[54]]]],[[]],[[],43],[[],43],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],31],[[],31],[[],31],[[],31],[[53,24],4],0,0,[[[57,[56]]],58],[[],58],[[],[[60,[59]]]],[[],58],[[],[[62,[61]]]],[[]],[[]],[[]],[[]],[[[57,[56]]]],[[[57,[56]]]],0,[[[57,[[0,[34,56]]]],25],26],[[[63,[[0,[34,2]],34]],25],26],[[]],[[]],0,[[]],[[]],0,[56,[[57,[56]]]],[[2,16,15],[[63,[2,48]]]],[[2,16,15],[[63,[2]]]],[[[63,[2,[22,[[49,[41]]]]]],17,18,12],[[30,[9]]]],[[[63,[2,[22,[[49,[41]]]]]],24,27],4],[[[63,[2,[22,[[49,[41]]]]]],24,27],4],[[],30],[[],30],[[],30],[[],30],[[],31],[[],31],[[[63,[2,[22,[[49,[41]]]]]],24],4],[[[63,[2]]],2],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[2]]]],[[[3,[[0,[2,34]]]],25],26],[[[64,[[0,[34,2]]]],25],26],[[[65,[[0,[34,2]]]],25],26],[[]],[[]],[[]],[[[3,[2]]],2],[[]],[[]],[[]],[[]],[[]],[[[3,[2]]],2],[[[66,[[64,[2]]]],67],68],[[[66,[[65,[2]]]],67],68],[[[3,[2]]],[[64,[2]]]],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],31],[[],31],[[],31],[[[3,[2]]],[[65,[2]]]],0,0,0,[[]],[[]],[[69,25],26],[[69,25],26],[[]],[[]],[[],70],[38],[69,[[13,[41]]]],[[],43],[[],30],[[],30],[[],31],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[71,[73,[72]]],4],[72,74],[72,74],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[75,75],[72,72],[76,76],[[]],[[]],[[]],[[72,72],77],[71],[[72,72],23],[[76,76],23],[[],23],[[],23],[[75,25],26],[[71,25],26],[[78,25],26],[[78,25],26],[[72,25],[[30,[47]]]],[[72,25],[[30,[47]]]],[[76,25],[[30,[47]]]],[[]],[[]],[[]],[[]],[[]],[74,[[30,[72,50]]]],[75,76],[[72,79]],[[76,79]],[[]],[[]],[[]],[[]],[[]],[[],80],[[[73,[72]]],[[4,[71]]]],[[72,72],[[13,[77]]]],[[71,17,18,12],[[30,[9]]]],[38],[[71,24,27],4],[[71,[73,[72]]],4],[[71,24,27],4],[[71,[73,[72]]],4],0,[75,72],[78,[[13,[41]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[],43],[[],43],[[],30],[[],30],[[],30],[81,[[30,[72,50]]]],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],31],[[],31],[[],31],[[],31],[[],31],[[71,24],4],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[82,[[13,[83]]]],[[84,25],26],[[82,25],26],[[85,25],26],[[]],[[]],[[]],[[1,83],84],[83,82],[[1,21],84],[21,82],[[],82],[[]],[[]],[[]],[[]],[[[66,[84]],67],68],[[82,17,18,12],[[30,[9]]]],[[82,24,27],4],[[82,24,27],4],[[82,83]],[[82,21]],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],31],[[],31],[[],31],[[82,24],4],0,[[]],[[]],[[],[[87,[86]]]],[[[87,[34]],25],26],[[]],[5,[[87,[5]]]],[[]],[87,23],[[87,28],13],[[[87,[5]],17,18,12],[[30,[9]]]],[[[87,[5]],24,27],4],[87],[87],[[[87,[5]],24,27],4],[[],30],[[],30],[[],31],[[[87,[5]],24],4]],"c":[],"p":[[3,"LoopHandle"],[8,"AsFd"],[3,"Async"],[6,"Result"],[8,"EventSource"],[3,"Dispatcher"],[3,"RefMut"],[3,"Ref"],[4,"PostAction"],[3,"EventLoop"],[8,"Future"],[8,"FnMut"],[4,"Option"],[3,"Idle"],[4,"Mode"],[3,"Interest"],[3,"Readiness"],[3,"Token"],[3,"RegistrationToken"],[3,"LoopSignal"],[3,"Duration"],[8,"Into"],[15,"bool"],[3,"Poll"],[3,"Formatter"],[6,"Result"],[3,"TokenFactory"],[8,"FnOnce"],[3,"InsertError"],[4,"Result"],[3,"TypeId"],[3,"Sender"],[3,"SyncSender"],[8,"Debug"],[4,"Event"],[3,"Channel"],[3,"ChannelError"],[3,"Demand"],[3,"RecvError"],[3,"SendError"],[8,"Error"],[15,"usize"],[3,"String"],[4,"TryRecvError"],[4,"TrySendError"],[4,"Error"],[3,"Error"],[3,"Error"],[3,"Box"],[4,"Errno"],[8,"Clone"],[3,"Scheduler"],[3,"Executor"],[3,"ExecutorDestroyed"],[4,"ExecutorError"],[8,"AsRawFd"],[3,"FdWrapper"],[3,"BorrowedFd"],[8,"FilelikeViewType"],[3,"FilelikeView"],[8,"SocketlikeViewType"],[3,"SocketlikeView"],[3,"Generic"],[3,"Readable"],[3,"Writable"],[3,"Pin"],[3,"Context"],[4,"Poll"],[3,"PingError"],[6,"Result"],[3,"Signals"],[4,"Signal"],[15,"slice"],[15,"str"],[3,"Event"],[3,"siginfo"],[4,"Ordering"],[3,"SignalError"],[8,"Hasher"],[3,"SignalIterator"],[15,"i32"],[3,"Timer"],[3,"Instant"],[3,"TimeoutFuture"],[4,"TimeoutAction"],[8,"Default"],[3,"TransientSource"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
